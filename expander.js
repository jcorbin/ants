// Generated by CoffeeScript 1.3.3
(function() {
  var elementBox, getOffset, moveTo, moveToClamped, root, viewBox,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  getOffset = function(el) {
    var x, y;
    x = y = 0;
    while (el != null) {
      x += el.offsetLeft;
      y += el.offsetTop;
      el = el.offsetParent;
    }
    return [x, y];
  };

  viewBox = function(win) {
    return [win.pageXOffset, win.pageYOffset, win.innerWidth + win.pageXOffset, win.innerHeight + win.pageYOffset];
  };

  elementBox = function(el) {
    var o;
    o = getOffset(el);
    return [o[0], o[1], o[0] + el.offsetWidth, o[1] + el.offsetHeight];
  };

  moveTo = function(el, x, y) {
    el.style.left = x + 'px';
    return el.style.top = y + 'px';
  };

  moveToClamped = function(el, x, y, box) {
    x = Math.max(box[0], x);
    y = Math.max(box[1], y);
    x = Math.min(box[2] - el.offsetWidth, x);
    y = Math.min(box[3] - el.offsetHeight, y);
    el.style.left = x + 'px';
    return el.style.top = y + 'px';
  };

  root.Expander = (function(_super) {

    __extends(Expander, _super);

    function Expander(anchor, element) {
      var doc;
      if (anchor != null) {
        this.anchor = anchor;
      }
      if (element != null) {
        this.element = element;
        this.element.style.position = 'absolute';
        this.element.style.display = '';
        this.element.style.visibility = 'hidden';
        this.element.style.zIndex = 100;
        doc = this.element.ownerDocument;
        if (this.element.parentNode !== doc.body) {
          doc.body.appendChild(this.element.parentNode.removeChild(this.element));
        }
      }
    }

    Expander.prototype.refresh = function() {
      var anch, view;
      anch = elementBox(this.anchor);
      view = viewBox(this.element.ownerDocument.defaultView);
      if (this.element.offsetHeight <= view[3] - anch[3]) {
        return moveToClamped(this.element, anch[0], anch[3], view);
      } else if (this.element.offsetHeight <= anch[1] - view[1]) {
        return moveToClamped(this.element, anch[0], anch[1] - this.element.offsetHeight, view);
      } else if (this.element.offsetWidth <= view[2] - anch[2]) {
        return moveToClamped(this.element, anch[2], anch[1], view);
      } else if (this.element.offsetWidth <= anch[0] - view[0]) {
        return moveToClamped(this.element, anch[0] - this.element.offsetWidth, anch[1], view);
      } else {
        return moveToClamped(this.element, anch[0], anch[3], view);
      }
    };

    Expander.prototype.onViewClick = function(e) {
      var el;
      el = e.target;
      while (el != null) {
        if (el === this.element || el === this.anchor) {
          return;
        }
        el = el.parentNode;
      }
      return this.collapse();
    };

    Expander.prototype.expand = function() {
      var view;
      this.refresh();
      this.element.style.visibility = 'visible';
      view = this.element.ownerDocument.defaultView;
      if (!(this._onviewresize != null)) {
        this._onviewresize = this.refresh.bind(this);
        view.addEventListener('resize', this._onviewresize, false);
      }
      if (!(this._onviewclick != null)) {
        this._onviewclick = this.onViewClick.bind(this);
        return view.addEventListener('click', this._onviewclick, false);
      }
    };

    Expander.prototype.collapse = function() {
      var view;
      this.element.style.visibility = 'hidden';
      view = this.element.ownerDocument.defaultView;
      if (this._onviewresize != null) {
        view.removeEventListener('resize', this._onviewresize, false);
        delete this._onviewresize;
      }
      if (this._onviewclick != null) {
        view.removeEventListener('click', this._onviewclick, false);
        return delete this._onviewclick;
      }
    };

    return Expander;

  })(root.EventDispatcher);

}).call(this);
