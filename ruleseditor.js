// Generated by CoffeeScript 1.3.3
(function() {
  var root, _base, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_ref = (_base = (root = typeof exports !== "undefined" && exports !== null ? exports : this)).Ants) == null) {
    _base.Ants = {};
  }

  root.Ants.RulesEditor = (function(_super) {

    __extends(RulesEditor, _super);

    function RulesEditor(grid, ant, input) {
      var cell, doc, el, row,
        _this = this;
      this.grid = grid;
      this.ant = ant;
      this.input = input;
      this.input.addEventListener('keypress', function() {
        return _this.size = Math.max(1, _this.value.length);
      }, false);
      this.input.addEventListener('change', function() {
        try {
          _this.ant.setTurnString(_this.input.value);
        } catch (err) {
          _this.input.value = _this.ant.getTurnString();
        }
        return _this.refresh();
      }, false);
      ant.addListener('turnsChanged', function() {
        _this.input.value = _this.ant.getTurnString();
        return _this.input.size = _this.input.value.length;
      });
      this.input.value = this.ant.getTurnString();
      this.input.size = this.input.value.length;
      doc = input.ownerDocument;
      this.table = doc.createElement('table');
      this.table.className = 'rules';
      this.table.style.display = 'none';
      this.table.style.position = 'absolute';
      row = this.table.createTHead().insertRow(-1);
      row.appendChild(doc.createElement('th')).appendChild(doc.createTextNode('On color'));
      row.appendChild(doc.createElement('th')).appendChild(doc.createTextNode('turn.'));
      row.appendChild(doc.createElement('th')).appendChild(doc.createTextNode(' '));
      row = this.table.createTFoot().insertRow(-1);
      cell = row.insertCell(-1);
      cell.appendChild(doc.createTextNode(' '));
      cell.colSpan = 2;
      el = row.insertCell(-1).appendChild(doc.createElement('button'));
      el.appendChild(doc.createTextNode('+'));
      el.addEventListener('click', this.onAddRuleClicked.bind(this), false);
      this.table.appendChild(doc.createElement('tbody'));
      doc.body.appendChild(this.table);
      RulesEditor.__super__.constructor.call(this, this.input, this.table);
      this.input.addEventListener('focus', this.expand.bind(this), false);
    }

    RulesEditor.prototype.addRuleRow = function(color, rule) {
      var body, button, cell, doc, option, row, select;
      body = this.table.tBodies[0];
      doc = body.ownerDocument;
      row = body.insertRow(-1);
      cell = row.insertCell(-1);
      cell.className = 'swatch';
      cell.appendChild(doc.createTextNode(' '));
      cell.style.backgroundColor = color;
      cell = row.insertCell(-1);
      select = cell.appendChild(doc.createElement('select'));
      option = select.appendChild(doc.createElement('option'));
      option.appendChild(doc.createTextNode('Left'));
      option = select.appendChild(doc.createElement('option'));
      option.appendChild(doc.createTextNode('Right'));
      select.value = rule;
      select.addEventListener('change', this.update.bind(this), false);
      cell = row.insertCell(-1);
      button = cell.appendChild(doc.createElement('button'));
      button.className = 'rule_del';
      button.appendChild(doc.createTextNode('-'));
      return button.addEventListener('click', this.onDelRuleClicked.bind(this), false);
    };

    RulesEditor.prototype.update = function() {
      var body, i, row;
      this.grid.stop();
      body = this.table.tBodies[0];
      this.ant.turns = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = body.rows;
        _results = [];
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          row = _ref1[i];
          _results.push(Ants.Ant.Name2Turn(row.getElementsByTagName('select')[0].value));
        }
        return _results;
      })();
      this.ant.dispatch('turnsChanged');
      return this.grid.reset();
    };

    RulesEditor.prototype.refresh = function() {
      var b, body, disabled, i, turn, _i, _j, _len, _len1, _ref1, _ref2;
      RulesEditor.__super__.refresh.apply(this, arguments);
      body = this.table.tBodies[0];
      while (body.childNodes.length) {
        body.removeChild(body.firstChild);
      }
      _ref1 = this.ant.turns;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        turn = _ref1[i];
        this.addRuleRow(this.grid.colors[i], Ants.Ant.Turn2Name(turn));
      }
      disabled = this.grid.colors.length <= 2;
      _ref2 = this.table.getElementsByClassName('rule_del');
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        b = _ref2[_j];
        b.disabled = disabled;
      }
    };

    RulesEditor.prototype.onDelRuleClicked = function(e) {
      var i, r, row, _i, _len, _ref1;
      if (this.grid.colors.length <= 2) {
        return;
      }
      row = e.target;
      while (row.tagName.toLowerCase() !== 'tr') {
        row = row.parentNode;
      }
      _ref1 = row.parentNode.rows;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        r = _ref1[i];
        if (r === row) {
          this.grid.stop();
          this.grid.removeColor(i);
          this.refresh();
          e.stopPropagation();
        }
      }
    };

    RulesEditor.prototype.onAddRuleClicked = function() {
      this.grid.stop();
      this.grid.addColor();
      return this.refresh();
    };

    return RulesEditor;

  })(root.Expander);

}).call(this);
