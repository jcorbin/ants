// Generated by CoffeeScript 1.3.3
(function() {

  (function() {
    var editor, faster, grid, iteration, reset, rules, runctl, slower, updateGeometry, updateIteration;
    grid = document.getElementById('grid');
    reset = document.getElementById('reset');
    slower = document.getElementById('slower');
    faster = document.getElementById('faster');
    iteration = document.getElementById('iteration');
    runctl = document.getElementById('run_ctl');
    rules = document.getElementById('rules');
    updateGeometry = function() {
      var cont, ctl;
      ctl = document.getElementById("controls");
      cont = document.getElementById("container");
      return ctl.style.left = Math.floor(ctl.parentNode.clientWidth / 2 - ctl.offsetWidth / 2) + "px";
    };
    window.addEventListener("resize", updateGeometry, false);
    updateGeometry();
    grid = new Ants.Grid(grid, 8, 8, Ants.Grid.HueWheelGenerator(0.5, 0.3));
    grid.addAnt(new Ants.Ant(Math.floor(grid.rows / 2), Math.floor(grid.cols / 2), 0, "#fff", "RL"));
    reset.addEventListener('click', grid.reset.bind(grid), false);
    slower.addEventListener('click', (function() {
      return grid.runSlower(2);
    }), false);
    faster.addEventListener('click', (function() {
      return grid.runFaster(2);
    }), false);
    updateIteration = function() {
      iteration.value = grid.iteration.toString();
      return iteration.size = iteration.value.length;
    };
    iteration.addEventListener('keypress', (function() {
      return this.size = Math.max(1, this.value.length);
    }), false);
    iteration.addEventListener('change', (function() {
      var i;
      i = parseInt(iteration.value);
      if (isNaN(i || i < grid.iteration)) {
        return updateIteration();
      } else {
        return grid.setIteration(i);
      }
    }), false);
    grid.addListener("reset", updateIteration);
    grid.addListener("step", updateIteration);
    updateIteration();
    grid.addListener("play", function() {
      iteration.readOnly = true;
      return runctl.innerText = 'Pause';
    });
    grid.addListener("stop", function() {
      iteration.readOnly = false;
      return runctl.innerText = 'Play';
    });
    window.addEventListener('keypress', function(e) {
      if (!grid.running && e.charCode === 32) {
        return grid.runStep();
      }
    });
    window.addEventListener("error", grid.stop.bind(grid), false);
    runctl.addEventListener('click', (function() {
      if (grid.running === null) {
        return grid.play();
      } else {
        return grid.stop();
      }
    }), false);
    editor = new Ants.RulesEditor(grid, grid.ants[0], rules);
    return {
      grid: grid,
      ruleseditor: editor
    };
  })();

}).call(this);
